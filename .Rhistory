season_year= "Seasonality"),
`Item Code`=
as.character(`Item Code`),
`Item Code`= case_match(`Item Code`, "1242" ~ "Outlier(1242)", "1272" ~ "General(1272)", .default = char_vec))|>
ggplot(aes(Yearmonth,
Value, color =`Item Code`, linetype = Category))+
geom_line() +
theme_bw() +
scale_color_manual(values =color_list) +
facet_grid(Method ~Region )+ labs(title = "The STL decomposition of AMES sample products", y = " ", x ="", linetype =" ")+
theme( axis.text.x = element_text(
angle =-50 , hjust =-0.5))
p<-example_tsb  |> filter(`Item Code` %in% middle)|>
model(STL( Volume~ trend(window =5)+season( window ="periodic")))  |>
components() |>
pivot_longer(Volume:season_adjust,
names_to = "Method",
values_to ="Value") |>
mutate( Method =factor(Method,
levels = c("Volume", "trend","season_adjust","season_year", "remainder"))) |>
left_join(example_tsb_ctgy)|> filter(`Item Code` ==c(1242,1272) &Method ==c("Volume", "trend","season_year")) |>
mutate(Method= recode(Method,
trend="Trend",
season_year= "Seasonality"),
`Item Code`=
as.character(`Item Code`),
`Item Code`= case_match(`Item Code`, "1242" ~ "Outlier(1242)", "1272" ~ "General(1272)"))|>
ggplot(aes(Yearmonth,
Value, color =`Item Code`, linetype = Category))+
geom_line() +
theme_bw() +
scale_color_manual(values =color_list) +
facet_grid(Method ~Region )+ labs(title = "The STL decomposition of AMES sample products", y = " ", x ="", linetype =" ")+
theme( axis.text.x = element_text(
angle =-50 , hjust =-0.5))
ggplotly(p)|>
layout(legend = list(orientation = 'h'))
example_tsb_org_mid<-as.tibble(example_tsb )|>
filter( `Item Code` %in%c(middle)) |>
select(Yearmonth,Volume,Category, Region, `Item Code`)
example_tsb_call_mid<-example_tsb_model_tbmt_spl|>
filter( Model =="ETS" &`Item Code` %in%c(middle))
model_actual<-example_tsb_org_mid|>
ggplot(aes(Yearmonth,Volume,color = `Item Code`)) +
geom_line( linetype =4) +
geom_line(data =example_tsb_call_mid,aes( Yearmonth, Volume,color = `Item Code`))+facet_wrap(.~Region, nrow =3)+theme_bw()+ scale_color_manual(values =color_list)+
labs(title ="The historical trend + ETS model prediction in confusion product")
ggplotly(model_actual)|>
layout(legend = list(orientation = 'h'))
example_tsb_org_mid<-as.tibble(example_tsb )|>
filter( `Item Code` %in%c(middle)) |>
select(Yearmonth,Volume,Category, Region, `Item Code`)
example_tsb_call_mid<-example_tsb_model_tbmt_spl|>
filter( Model =="ETS" &`Item Code` %in%c(1247,1272))
model_actual<-example_tsb_org_mid|>
ggplot(aes(Yearmonth,Volume,color = `Item Code`)) +
geom_line( linetype =4) +
geom_line(data =example_tsb_call_mid,aes( Yearmonth, Volume,color = `Item Code`))+facet_wrap(.~Region, nrow =3)+theme_bw()+ scale_color_manual(values =color_list)+
labs(title ="The historical trend + ETS model prediction in confusion product")
ggplotly(model_actual)|>
layout(legend = list(orientation = 'h'))
p<-example_tsb  |> filter(`Item Code` %in% middle)|>
model(STL( Volume~ trend(window =5)+season( window ="periodic")))  |>
components() |>
pivot_longer(Volume:season_adjust,
names_to = "Method",
values_to ="Value") |>
mutate( Method =factor(Method,
levels = c("Volume", "trend","season_adjust","season_year", "remainder"))) |>
left_join(example_tsb_ctgy)|>
ggplot(aes(Yearmonth,
Value, color =`Item Code`, linetype = Category))+
geom_line() +
theme_bw() +
scale_color_manual(values =color_list) +
facet_grid(Method ~Region )+ labs(title = "The STL decomposition of AMES sample products", y = " ", x ="", linetype =" ")+
theme( axis.text.x = element_text(
angle =-50 , hjust =-0.5))
ggplotly(p)|>
layout(legend = list(orientation = 'h'))
p<-example_tsb  |> filter(`Item Code` %in% middle)|>
model(STL( Volume~ trend(window =5)+season( window ="periodic")))  |>
components() |>
pivot_longer(Volume:season_adjust,
names_to = "Method",
values_to ="Value") |>
mutate( Method =factor(Method,
levels = c("Volume", "trend","season_adjust","season_year", "remainder"))) |>
left_join(example_tsb_ctgy)|>filter(  Method %in%c("Volume", "trend","season_adjust","season_year") &`Item Code` %in%c(1247,1272))
ggplot(aes(Yearmonth,
Value, color =`Item Code`, linetype = Category))+
geom_line() +
theme_bw() +
scale_color_manual(values =color_list) +
facet_grid(Method ~Region )+ labs(title = "The STL decomposition of AMES sample products", y = " ", x ="", linetype =" ")+
theme( axis.text.x = element_text(
angle =-50 , hjust =-0.5))
p<-example_tsb  |> filter(`Item Code` %in% middle)|>
model(STL( Volume~ trend(window =5)+season( window ="periodic")))  |>
components() |>
pivot_longer(Volume:season_adjust,
names_to = "Method",
values_to ="Value") |>
mutate( Method =factor(Method,
levels = c("Volume", "trend","season_adjust","season_year", "remainder"))) |>
left_join(example_tsb_ctgy)|>filter(  Method %in%c("Volume", "trend","season_adjust","season_year") &`Item Code` %in%c(1247,1272))|>
ggplot(aes(Yearmonth,
Value, color =`Item Code`, linetype = Category))+
geom_line() +
theme_bw() +
scale_color_manual(values =color_list) +
facet_grid(Method ~Region )+ labs(title = "The STL decomposition of AMES sample products", y = " ", x ="", linetype =" ")+
theme( axis.text.x = element_text(
angle =-50 , hjust =-0.5))
ggplotly(p)|>
layout(legend = list(orientation = 'h'))
p<-example_tsb  |> filter(`Item Code` %in% middle)|>
model(STL( Volume~ trend(window =5)+season( window ="periodic")))  |>
components() |>
pivot_longer(Volume:season_adjust,
names_to = "Method",
values_to ="Value") |>
mutate( Method =factor(Method,
levels = c("Volume", "trend","season_adjust","season_year", "remainder"))) |>
left_join(example_tsb_ctgy)|>filter(  Method %in%c("Volume", "trend","season_year") &`Item Code` %in%c(1247,1272))|>
ggplot(aes(Yearmonth,
Value, color =`Item Code`, linetype = Category))+
geom_line() +
theme_bw() +
scale_color_manual(values =color_list) +
facet_grid(Method ~Region )+ labs(title = "The STL decomposition of AMES sample products", y = " ", x ="", linetype =" ")+
theme( axis.text.x = element_text(
angle =-50 , hjust =-0.5))
ggplotly(p)|>
layout(legend = list(orientation = 'h'))
p<-example_tsb  |> filter(`Item Code` %in% middle)|>
model(STL( Volume~ trend(window =5)+season( window ="periodic")))  |>
components() |>
pivot_longer(Volume:season_adjust,
names_to = "Method",
values_to ="Value") |>
mutate( Method =factor(Method,
levels = c("Volume", "trend","season_adjust","season_year", "remainder"))) |>
left_join(example_tsb_ctgy)|>filter(  Method %in%c("Volume", "trend","season_year") &`Item Code` %in%c(1247,1272))|>
mutate( Method =recode(Method,
trend=Trend,season_year= "Seasonality")) |>
ggplot(aes(Yearmonth,
Value, color =`Item Code`, linetype = Category))+
geom_line() +
theme_bw() +
scale_color_manual(values =color_list) +
facet_grid(Method ~Region )+ labs(title = "The STL decomposition of AMES sample products", y = " ", x ="", linetype =" ")+
theme( axis.text.x = element_text(
angle =-50 , hjust =-0.5))
p<-example_tsb  |> filter(`Item Code` %in% middle)|>
model(STL( Volume~ trend(window =5)+season( window ="periodic")))  |>
components() |>
pivot_longer(Volume:season_adjust,
names_to = "Method",
values_to ="Value") |>
mutate( Method =factor(Method,
levels = c("Volume", "trend","season_adjust","season_year", "remainder"))) |>
left_join(example_tsb_ctgy)|>filter(  Method %in%c("Volume", "trend","season_year") &`Item Code` %in%c(1247,1272))|>
mutate( Method =recode(Method,
trend="Trend",season_year= "Seasonality")) |>
ggplot(aes(Yearmonth,
Value, color =`Item Code`, linetype = Category))+
geom_line() +
theme_bw() +
scale_color_manual(values =color_list) +
facet_grid(Method ~Region )+ labs(title = "The STL decomposition of AMES sample products", y = " ", x ="", linetype =" ")+
theme( axis.text.x = element_text(
angle =-50 , hjust =-0.5))
ggplotly(p)|>
layout(legend = list(orientation = 'h'))
p<-example_tsb  |> filter(`Item Code` %in% middle)|>
model(STL( Volume~ trend(window =5)+season( window ="periodic")))  |>
components() |>
pivot_longer(Volume:season_adjust,
names_to = "Method",
values_to ="Value") |>
mutate( Method =factor(Method,
levels = c("Volume", "trend","season_adjust","season_year", "remainder"))) |>
left_join(example_tsb_ctgy)|>filter(  Method %in%c("Volume", "trend","season_year") &`Item Code` %in%c(1247,1272))|>
mutate( Method =recode(Method,
trend="Trend",season_year= "Seasonality"),
`Item code` =recode(`Item code` ,
1247="Outlier",1272= "General") ) |>
p<-example_tsb  |> filter(`Item Code` %in% middle)|>
model(STL( Volume~ trend(window =5)+season( window ="periodic")))  |>
components() |>
pivot_longer(Volume:season_adjust,
names_to = "Method",
values_to ="Value") |>
mutate( Method =factor(Method,
levels = c("Volume", "trend","season_adjust","season_year", "remainder"))) |>
left_join(example_tsb_ctgy)|>filter(  Method %in%c("Volume", "trend","season_year") &`Item Code` %in%c(1247,1272))|>
mutate( Method =recode(Method,
trend="Trend",season_year= "Seasonality"),
`Item code` =case_match((`Item code` ,
p<-example_tsb  |> filter(`Item Code` %in% middle)|>
model(STL( Volume~ trend(window =5)+season( window ="periodic")))  |>
components() |>
pivot_longer(Volume:season_adjust,
names_to = "Method",
values_to ="Value") |>
mutate( Method =factor(Method,
levels = c("Volume", "trend","season_adjust","season_year", "remainder"))) |>
left_join(example_tsb_ctgy)|>filter(  Method %in%c("Volume", "trend","season_year") &`Item Code` %in%c(1247,1272))|>
mutate( Method =recode(Method,
trend="Trend",season_year= "Seasonality"),
`Item code` =case_match(`Item code` ,
1247~"Outlier",1272~ "General") ) |>
ggplot(aes(Yearmonth,
Value, color =`Item Code`, linetype = Category))+
geom_line() +
theme_bw() +
scale_color_manual(values =color_list) +
facet_grid(Method ~Region )+ labs(title = "The STL decomposition of AMES sample products", y = " ", x ="", linetype =" ")+
theme( axis.text.x = element_text(
angle =-50 , hjust =-0.5))
p<-example_tsb  |> filter(`Item Code` %in% middle)|>
model(STL( Volume~ trend(window =5)+season( window ="periodic")))  |>
components() |>
pivot_longer(Volume:season_adjust,
names_to = "Method",
values_to ="Value") |>
mutate( Method =factor(Method,
levels = c("Volume", "trend","season_adjust","season_year", "remainder"))) |>
left_join(example_tsb_ctgy)|>filter(  Method %in%c("Volume", "trend","season_year") &`Item Code` %in%c(1247,1272))|>
mutate( Method =recode(Method,
trend="Trend",season_year= "Seasonality")) |>
ggplot(aes(Yearmonth,
Value, color =`Item Code`, linetype = Category))+
geom_line() +
theme_bw() +
scale_color_manual(values =color_list) +
facet_grid(Method ~Region )+ labs(title = "The STL decomposition of AMES sample products", y = " ", x ="", linetype =" ")+
theme( axis.text.x = element_text(
angle =-50 , hjust =-0.5))
ggplotly(p)|>
layout(legend = list(orientation = 'h'))
p<-example_tsb  |> filter(`Item Code` %in% middle)|>
model(STL( Volume~ trend(window =5)+season( window ="periodic")))  |>
components() |>
pivot_longer(Volume:season_adjust,
names_to = "Method",
values_to ="Value") |>
mutate( Method =factor(Method,
levels = c("Volume", "trend","season_adjust","season_year", "remainder"))) |>
left_join(example_tsb_ctgy)|>filter(  Method %in%c("Volume", "trend","season_year") &`Item Code` %in%c(1247,1272))|>
mutate( Method =recode(Method,
trend="Trend",season_year= "Seasonality")) |>
ggplot(aes(Yearmonth,
Value, color =`Item Code`, linetype = Category))+
geom_line() +
theme_bw() +
scale_color_manual(values =color_list, labels =c("Outlier(1247)", "General")) +
facet_grid(Method ~Region )+ labs(title = "The STL decomposition of AMES sample products", y = " ", x ="", linetype =" ")+
theme( axis.text.x = element_text(
angle =-50 , hjust =-0.5))
ggplotly(p)|>
layout(legend = list(orientation = 'h'))
p<-example_tsb  |> filter(`Item Code` %in% middle)|>
model(STL( Volume~ trend(window =5)+season( window ="periodic")))  |>
components() |>
pivot_longer(Volume:season_adjust,
names_to = "Method",
values_to ="Value") |>
mutate( Method =factor(Method,
levels = c("Volume", "trend","season_adjust","season_year", "remainder"))) |>
left_join(example_tsb_ctgy)|>filter(  Method %in%c("Volume", "trend","season_year") &`Item Code` %in%c(1247,1272))|>
mutate( Method =recode(Method,
trend="Trend",season_year= "Seasonality")) |>
ggplot(aes(Yearmonth,
Value, color =`Item Code`, linetype = Category))+
geom_line() +
theme_bw() +
scale_color_manual(values =color_list, labels =c("Outlier(1247)", "General")) +
facet_grid(Method ~Region )+ labs(title = "The STL decomposition of AMES sample products", y = " ", x ="", linetype =" ")+
theme( axis.text.x = element_text(
angle =-50 , hjust =-0.5))
p
ggplotly(p)|>
layout(legend = list(orientation = 'h'))
p<-example_tsb  |> filter(`Item Code` %in% middle)|>
model(STL( Volume~ trend(window =5)+season( window ="periodic")))  |>
components() |>
pivot_longer(Volume:season_adjust,
names_to = "Method",
values_to ="Value") |>
mutate( Method =factor(Method,
levels = c("Volume", "trend","season_adjust","season_year", "remainder"))) |>
left_join(example_tsb_ctgy)|>filter(  Method %in%c("Volume", "trend","season_year") &`Item Code` %in%c(1247,1272))|>
mutate( Method =recode(Method,
trend="Trend",season_year= "Seasonality")) |>
ggplot(aes(Yearmonth,
Value, color =`Item Code`))+
geom_line() +
theme_bw() +
scale_color_manual(values =color_list, labels =c("Outlier(1247)", "General")) +
facet_grid(Method ~Region )+ labs(title = "The STL decomposition of AMES sample products", y = " ", x ="", linetype =" ")+
theme( axis.text.x = element_text(
angle =-50 , hjust =-0.5))+theme(legend.position = "bottom")
p
ggplotly(p)|>
layout(legend = list(orientation = 'h'))
p<-example_tsb  |> filter(`Item Code` %in% middle)|>
model(STL( Volume~ trend(window =5)+season( window ="periodic")))  |>
components() |>
pivot_longer(Volume:season_adjust,
names_to = "Method",
values_to ="Value") |>
mutate( Method =factor(Method,
levels = c("Volume", "trend","season_adjust","season_year", "remainder"))) |>
left_join(example_tsb_ctgy)|>filter(  Method %in%c("Volume", "trend","season_year") &`Item Code` %in%c(1247,1272))|>
mutate( Method =recode(Method,
trend="Trend",season_year= "Seasonality")) |>
ggplot(aes(Yearmonth,
Value, color =`Item Code`))+
geom_line() +
theme_bw()  +
facet_grid(Method ~Region )+ labs(title = "The STL decomposition of AMES sample products", y = " ", x ="", linetype =" ")+
theme( axis.text.x = element_text(
angle =-50 , hjust =-0.5))+theme(legend.position = "bottom")+
scale_color_manual(values =color_list, labels =c("Outlier(1247)", "General"))
p
ggplotly(p)|>
layout(legend = list(orientation = 'h'))
p<-example_tsb  |> filter(`Item Code` %in% middle)|>
model(STL( Volume~ trend(window =5)+season( window ="periodic")))  |>
components() |>
pivot_longer(Volume:season_adjust,
names_to = "Method",
values_to ="Value") |>
mutate( Method =factor(Method,
levels = c("Volume", "trend","season_adjust","season_year", "remainder"))) |>
left_join(example_tsb_ctgy)|>filter(  Method %in%c("Volume", "trend","season_year") &`Item Code` %in%c(1247,1272))|>
mutate( Method =recode(Method,
trend="Trend",season_year= "Seasonality")) |>
ggplot(aes(Yearmonth,
Value, color =`Item Code`))+
geom_line() +
theme_bw()  +
facet_grid(Method ~Region )+ labs(title = "The STL decomposition of AMES confusion products", y = " ", x ="", linetype =" ")+
theme( axis.text.x = element_text(
angle =-50 , hjust =-0.5))+theme(legend.position = "bottom")+
scale_color_manual(values =color_list, labels =c("Outlier(1247)", "General"))
p
ggplotly(p)|>
layout(legend = list(orientation = 'h'))
predict_result_final |> group_by(region) |> count(allocation_result_node_final) |> arrange(reion)
predict_result_final |> group_by(Region) |> count(allocation_result_node_final) |> arrange(Reion)
predict_result_final |> group_by(Region) |> count(allocation_result_node_final) |> arrange(Region)
unique(predict_result_final$allocation_result_node_final)
predict_result_final |> group_by(Region) |> count(allocation_result_node_final) |> arrange(Region)
predict_result_final |> group_by(Region) |> count(allocation_result_node_final) |>sum(n)
predict_result_final |> group_by(Region) |> count(allocation_result_node_final) |>summarise(n=sum(n))
predict_result_final |> count(allocation_result_node_final) |>summarise(n=sum(n))
predict_result_final |> count(allocation_result_node_final) |>arrange(Region)
predict_result_final |> group_by(Region）|> count(allocation_result_node_final) |>arrange(Region)
predict_result_final |> group_by(Region)|> count(allocation_result_node_final) |>arrange(Region)
predict_result_final |> group_by(Region)|> summarise( sum=sum(allocation_result_node_final) )
predict_result_final |> group_by(Region)|> count(Region)
predict_result_final$allocation_result_node_final|> table()
predict_result_final |> group_by(Region)|> summarise( =c(allocation_result_node_final) )|>arrange(Region)
predict_result_final |> group_by(Region)|> count(allocation_result_node_final)|>arrange(Region)
predict_result_final  |> filter(allocation_result_node_final== "NDC: FCL for consolidated sku")
predict_result_final  |> filter(allocation_result_node_final== "NDC: FCL for consolidated sku" & region!="SYD")
predict_result_final  |> filter(allocation_result_node_final== "NDC: FCL for consolidated sku" & Region!="SYD")
predict_result_sum<-   predict_result_mt|>
group_by(Supplier,Region) |>
summarise(Consol_CBM = round(sum(CBM),digits =2))
predict_result_pr<-left_join(predict_result_mt, predict_result_sum,
by = c("Supplier", "Region"))|>
mutate(allocation_result_node_pr = case_when(
CBM <= 0 ~"No or wrong predictive orders detected",
Region == "MEL" & CBM>0  ~ "NDC check",
Region != "MEL"& CBM>=  67*0.95 ~ "RDC: FCL for single sku",
Region != "MEL"& CBM < 67*0.95 &leftover_space> 0 &  leftover_space<=5~"RDC: FCL for single sku by adjusting the volume quantity",
Region != "MEL"& CBM < 67*0.95  &  Consol_CBM >=  67*0.95 & leftover_space>5 ~"RDC: FCL for consolidated sku",
Region != "MEL"& Consol_CBM  <  67*0.95  ~"NDC check",
TRUE ~ NA_character_
))
predict_result_sum_ndc<- predict_result_pr |> filter(allocation_result_node_pr =="NDC check")  |>
group_by(Supplier) |>
summarise(Consol_CBM_NDC =sum(CBM))|> ungroup()
predict_result_node1<-left_join(predict_result_pr, predict_result_sum_ndc,  by = c("Supplier"))|>
mutate(
allocation_result_node1 = case_when(
allocation_result_node_pr == "NDC check" & CBM >= 67*0.95  ~ "NDC: FCL for single sku",
allocation_result_node_pr == "NDC check" & CBM<  67*0.95 &leftover_space> 0 &  leftover_space<=5~ "NDC: FCL for single sku by adjusting the volume quantity",
allocation_result_node_pr == "NDC check" & CBM<  67*0.95   & Consol_CBM_NDC >= 67*0.95 & leftover_space>5  ~ "NDC: FCL for consolidated sku",
allocation_result_node_pr == "NDC check" &  Consol_CBM_NDC < 67*0.95  ~ "Other strategy to wait for FCL consolidation",
TRUE~allocation_result_node_pr
))
predict_result_study<- predict_result_node1 |>
left_join(storage_cost, by ="Region") |>
left_join(dtrans_cost, by = c("State" = "Destination"))|>
rename(rdc_sf=Cost)|> mutate(CBM.cost =as.numeric(str_remove(CBM.cost, "\\$")),
ndc_storage = as.numeric(str_remove(ndc_storage, "\\$")),
rdc_storage=as.numeric(str_remove(rdc_storage, "\\$")))
ndc_sf<-predict_result_study |> group_by(Supplier,`Item Code`) |>filter(Region =="MEL")|>select(rdc_sf,Supplier)|> distinct()|> rename(ndc_sf=rdc_sf)
predict_result_final<-left_join(predict_result_study,ndc_sf, by =c("Supplier", "Item Code")) |>mutate(
Reg_cost =  67 *( rdc_storage) +  CBM *rdc_sf ,
NDC_cost = CBM * (ndc_sf+ rdc_storage + CBM.cost),
cost_difference =  if_else(Region == "MEL" |allocation_result_node1 %in% c("RDC: FCL for single sku", "RDC: FCL for consolidated sku","Other strategy to wait for FCL consolidation"),
NA, (NDC_cost*1.05-Reg_cost)),
allocation_result_node_final = if_else( !is.na(cost_difference)& cost_difference >= 0,"RDC: revise for cost analysis", allocation_result_node1),
cost_difference =if_else( is.na(cost_difference),"Not appliable", paste0("$",round(cost_difference,digits =2))
))
predict_result_final$allocation_result_node_final|> table()
predict_result_final  |> filter(allocation_result_node_final== "NDC: FCL for consolidated sku" & Region!="MEL")
predict_result_final |>filter(Region=="MEL") |> count(allocation_result_node_final)
predict_result_final  |> filter(allocation_result_node_final== "NDC: FCL for consolidated sku" & Region!="MEL")
predict_result_final  |> filter(allocation_result_node_final== "NDC: FCL for consolidated sku" & Region!="MEL") |> group_by(Region) |> count(allocation_result_node_final)
predict_result_final  |> filter(allocation_result_node_final== "NDC: FCL for consolidated sku" & Region!="MEL") |> group_by(Region) |> count(Supplier)
predict_result_final  |> filter(allocation_result_node_final== "RDC: revise for cost analysis" & Region!="MEL")
predict_result_final |> select(CBM,CBM.cost)
predict_result_final |> select(CBM,CBM.cost, rdc_storage,ndc_storage)
predict_result_final |> filter(allocation_result_node_final== "RDC: revise for cost analysis" & Region!="MEL")  |> select(CBM,CBM.cost, rdc_storage,ndc_storage)
predict_result_final |> filter(allocation_result_node_final== "RDC: revise for cost analysis" & Region!="MEL")  |> select(CBM,CBM.cost, rdc_storage,ndc_storage, ndc_sf, rdc_sf)
predict_result_final |> filter(allocation_result_node_final== "RDC: revise for cost analysis" & Region!="MEL")  |> select(CBM,CBM.cost, rdc_storage,ndc_storage, ndc_sf, rdc_sf,CBM.cost)
predict_result_final |> filter(allocation_result_node_final== "RDC: revise for cost analysis" & Region!="MEL")  |> select(CBM,CBM.cost, rdc_storage,ndc_storage, ndc_sf, rdc_sf,CBM.cost, Reg_cost, NDC_cost)
predict_result_sum<-   predict_result_mt|>
group_by(Supplier,Region) |>
summarise(Consol_CBM = round(sum(CBM),digits =2))
predict_result_pr<-left_join(predict_result_mt, predict_result_sum,
by = c("Supplier", "Region"))|>
mutate(allocation_result_node_pr = case_when(
CBM <= 0 ~"No or wrong predictive orders detected",
Region == "MEL" & CBM>0  ~ "NDC check",
Region != "MEL"& CBM>=  67*0.95 ~ "RDC: FCL for single sku",
Region != "MEL"& CBM < 67*0.95 &leftover_space> 0 &  leftover_space<=5~"RDC: FCL for single sku by adjusting the volume quantity",
Region != "MEL"& CBM < 67*0.95  &  Consol_CBM >=  67*0.95 & leftover_space>5 ~"RDC: FCL for consolidated sku",
Region != "MEL"& Consol_CBM  <  67*0.95  ~"NDC check",
TRUE ~ NA_character_
))
predict_result_sum_ndc<- predict_result_pr |> filter(allocation_result_node_pr =="NDC check")  |>
group_by(Supplier) |>
summarise(Consol_CBM_NDC =sum(CBM))|> ungroup()
predict_result_node1<-left_join(predict_result_pr, predict_result_sum_ndc,  by = c("Supplier"))|>
mutate(
allocation_result_node1 = case_when(
allocation_result_node_pr == "NDC check" & CBM >= 67*0.95  ~ "NDC: FCL for single sku",
allocation_result_node_pr == "NDC check" & CBM<  67*0.95 &leftover_space> 0 &  leftover_space<=5~ "NDC: FCL for single sku by adjusting the volume quantity",
allocation_result_node_pr == "NDC check" & CBM<  67*0.95   & Consol_CBM_NDC >= 67*0.95 & leftover_space>5  ~ "NDC: FCL for consolidated sku",
allocation_result_node_pr == "NDC check" &  Consol_CBM_NDC < 67*0.95  ~ "Other strategy to wait for FCL consolidation",
TRUE~allocation_result_node_pr
))
predict_result_study<- predict_result_node1 |>
left_join(storage_cost, by ="Region") |>
left_join(dtrans_cost, by = c("State" = "Destination"))|>
rename(rdc_sf=Cost)|> mutate(CBM.cost =as.numeric(str_remove(CBM.cost, "\\$")),
ndc_storage = as.numeric(str_remove(ndc_storage, "\\$")),
rdc_storage=as.numeric(str_remove(rdc_storage, "\\$")))
ndc_sf<-predict_result_study |> group_by(Supplier,`Item Code`) |>filter(Region =="MEL")|>select(rdc_sf,Supplier)|> distinct()|> rename(ndc_sf=rdc_sf)
predict_result_final<-left_join(predict_result_study,ndc_sf, by =c("Supplier", "Item Code")) |>mutate(
Reg_cost =  67 *( rdc_storage) +  CBM *rdc_sf ,
NDC_cost =  Consol_CBM * (ndc_sf+ rdc_storage + CBM.cost),
cost_difference =  if_else(Region == "MEL" |allocation_result_node1 %in% c("RDC: FCL for single sku", "RDC: FCL for consolidated sku","Other strategy to wait for FCL consolidation"),
NA, (NDC_cost*1.05-Reg_cost)),
allocation_result_node_final = if_else( !is.na(cost_difference)& cost_difference >= 0,"RDC: revise for cost analysis", allocation_result_node1),
cost_difference =if_else( is.na(cost_difference),"Not appliable", paste0("$",round(cost_difference,digits =2))
))
predict_result_final$allocation_result_node_final|> table()
predict_result_final$allocation_result_node_final|> table()
predict_result_final$allocation_result_node_final|> table()
predict_result_final$allocation_result_node_final|> table()
predict_result_final$allocation_result_node_final|> table()
predict_result_final$allocation_result_node_final|> table()
predict_result_final |> count(allocation_result_node_final)
predict_result_final |> group_by(Region) |>  count(allocation_result_node_final)
predict_result_final |>
select(`Item Code`, Region, Yearmonth, allocation_result_node_final,
cost_difference, CBM, Consol_CBM, Consol_CBM_NDC)  |>
rename(`Final decision` = allocation_result_node_final,
`RDC consol` =Consol_CBM,
`NDC consol` =Consol_CBM_NDC)|>
mutate(Yearmonth =as.character(Yearmonth)  ) |>
datatable( filter ="top",
callback=JS('
$("button.buttons-copy").css({
"background": "#81D8D0",
"border": "2px solid #000000",
"color":"white",
"fontweight":"bold",
"border-radius": "10px"
});
$("button.buttons-csv").css({
"background": "#FF7900",
"border": "2px solid #000000",
"border-radius": "10px",
"color":"white",
"fontweight":"bold"
});
return table;
')
,
extensions = c('Buttons', 'Scroller','FixedColumns'),
options = list(
scrollY = 400,
scroller = TRUE,
dom = 'Bfrtip',
scrollX = TRUE,
fixedColumns = TRUE,
buttons = list( list(extend = "copy", text = '<svg xmlns="http://www.w3.org/2000/svg" height="16" width="14" viewBox="0 0 448 512"><!--!Font Awesome Free 6.5.1 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2023 Fonticons, Inc.--><path d="M384 336H192c-8.8 0-16-7.2-16-16V64c0-8.8 7.2-16 16-16l140.1 0L400 115.9V320c0 8.8-7.2 16-16 16zM192 384H384c35.3 0 64-28.7 64-64V115.9c0-12.7-5.1-24.9-14.1-33.9L366.1 14.1c-9-9-21.2-14.1-33.9-14.1H192c-35.3 0-64 28.7-64 64V320c0 35.3 28.7 64 64 64zM64 128c-35.3 0-64 28.7-64 64V448c0 35.3 28.7 64 64 64H256c35.3 0 64-28.7 64-64V416H272v32c0 8.8-7.2 16-16 16H64c-8.8 0-16-7.2-16-16V192c0-8.8 7.2-16 16-16H96V128H64z"/></svg>'),
list(extend = "csv", text = '<svg xmlns="http://www.w3.org/2000/svg" height="16" width="16" viewBox="0 0 512 512"><!--!Font Awesome Free 6.5.1 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2023 Fonticons, Inc.--><path d="M288 32c0-17.7-14.3-32-32-32s-32 14.3-32 32V274.7l-73.4-73.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l128 128c12.5 12.5 32.8 12.5 45.3 0l128-128c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L288 274.7V32zM64 352c-35.3 0-64 28.7-64 64v32c0 35.3 28.7 64 64 64H448c35.3 0 64-28.7 64-64V416c0-35.3-28.7-64-64-64H346.5l-45.3 45.3c-25 25-65.5 25-90.5 0L165.5 352H64zm368 56a24 24 0 1 1 0 48 24 24 0 1 1 0-48z"/></svg>')) ,
initComplete = JS(
"function(settings, json) {",
"$(this.api().table().header()).css({'background-color': '#3A5311', 'color': '#fff'});",
"}"))) |> formatRound(6:8,2)
